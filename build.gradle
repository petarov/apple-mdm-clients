plugins {
    alias(libs.plugins.versions) apply false
}

def gitExec = { List<String> args ->
    var out = new ByteArrayOutputStream()
    exec {
        commandLine = ['git'] + args
        standardOutput = out
        ignoreExitValue = true
    }
    return out.toString().trim()
}

ext {
    gitCommitId = gitExec(['rev-parse', '--short', 'HEAD'])
    gitCommitTime = gitExec(['log', '-1', '--format=%cI', 'HEAD'])
}

println "--> Last commit id:   ${gitCommitId}"
println "--> Last commit time: ${gitCommitTime}"


import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar
import com.vanniktech.maven.publish.SonatypeHost

allprojects {
    group 'net.vexelon.mdm'
    ext.copyright = 'MIT License, Copyright (c) 2025 Petar Petrov'

    repositories {
        mavenCentral()
    }
}

subprojects {
    if (project.path == ':examples') {
        return
    }

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.vanniktech.maven.publish'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                    "Implementation-Version": project.provider { project.version },
                    "Implementation-Id": "${gitCommitId}",
                    "Implementation-LastModified": "${gitCommitTime}")
        }
    }

    mavenPublishing {
        configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
        publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
        signAllPublications()

        pom {
            version = project.version.toString()
            name = project.name
            description = project.provider { project.description }
            url = 'https://github.com/petarov/apple-mdm-clients'

            licenses {
                license {
                    name = 'The MIT License'
                    url = 'http://opensource.org/licenses/MIThttp://opensource.org/licenses/MIT'
                }
            }
            developers {
                developer {
                    id = 'petarov'
                    name = 'Petar Petrov'
                    email = project.findProperty('dev_email') ?: ''
                }
            }
            scm {
                connection = 'scm:git:https://github.com/petarov/apple-mdm-clients.git'
                developerConnection = 'scm:git:git@github.com:petarov/apple-mdm-clients.git'
                url = 'https://github.com/petarov/apple-mdm-clients'
            }
        }
    }

    signing {
        useGpgCmd()
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/petarov/apple-mdm-clients")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(PublishToMavenRepository).configureEach {
        if (repository.url.host.contains("oss.sonatype.org")) {
            onlyIf { !project.version.toString().endsWith("-SNAPSHOT") }
        }
    }

    tasks.register("publishSnapshot") {
        group = "publishing"
        description = "Publish SNAPSHOT versions to GitHub Packages only"
        dependsOn 'publishMavenPublicationToGitHubPackagesRepository'
        onlyIf { project.version.toString().endsWith("-SNAPSHOT") }
    }

    tasks.named("signMavenPublication").configure { Sign s ->
        s.onlyIf {
            def isSnapshot = project.version.toString().endsWith("-SNAPSHOT")
            if (isSnapshot) {
                logger.lifecycle("Skipping signing for SNAPSHOT build (${project.version})")
            }
            !isSnapshot
        }
    }
}
